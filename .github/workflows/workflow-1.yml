name: Build Python for Android ARM64

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 第 1 步：检出代码库
      - name: Checkout Code
        uses: actions/checkout@v3

      # 第 2 步：安装依赖
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential zlib1g-dev libffi-dev libssl-dev libbz2-dev \
                              libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
                              libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
                              liblzma-dev git tar python3 python3-pip unzip

          # 下载并解压 Android NDK
          mkdir -p ~/android-ndk
          wget https://dl.google.com/android/repository/android-ndk-r27b-linux.zip -P ~/android-ndk/
          unzip ~/android-ndk/android-ndk-r27b-linux.zip -d ~/android-ndk/
          export ANDROID_NDK_HOME=~/android-ndk/android-ndk-r27b
          export PATH=$ANDROID_NDK_HOME:$PATH

      # 第 3 步：下载 Python 源码
      - name: Download Python Source
        run: |
          PYTHON_VERSION=3.12.0
          wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz
          tar -xf Python-$PYTHON_VERSION.tgz
          mv Python-$PYTHON_VERSION cpython

      # 第 4 步：配置和编译 Python
      - name: Configure and Compile Python
        run: |
          cd cpython

          # 创建 CONFIG_SITE 文件
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
ac_cv_file__dev_ptmx=yes
ac_cv_file__dev_ptc=no
EOF
          
          # 设置本地构建 Python 路径
          export BUILD_PYTHON=$(which python3)
          
          ./configure --host=aarch64-linux-android --build=x86_64-linux-gnu \
                      --disable-optimizations \
                      --disable-ipv6 \
                      --with-build-python=$BUILD_PYTHON \
                      CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang \
                      CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang++ \
                      AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar \
                      RANLIB=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ranlib
          make -j$(nproc)

      # 第 5 步：打包编译结果
      - name: Package Python Binary
        run: |
          mkdir -p output
          cp cpython/python output/python-arm64
          tar -czvf python-arm64.tar.gz -C output python-arm64

      # 第 6 步：上传产物
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-arm64-binary
          path: python-arm64.tar.gz